#!/bin/sh

# Dmenu-based directory browser
# Dependency: dmenu

### OPTIONS AND VARIABLES
chosen="placeholder"
target="TARGET_DIR/"
backward="BACK/"
copypath="CP_PATH/"

# Generate directories
# Variables cannot store multiline string, so transform to ':'
# Regex explain:
# s=.*[\/]$==g: end with '/', delete (to file or dotfile)
# s=.*[^\/]$==g: not end with '/', delete (to dir or dotdir)
# s=^[\.].*==g: begin with '.', delete (to file or dir)
# s=^[^\.].*==g: not begin with '.', delete (to dotfile or dotdir)
menudir () {
	DIRs=$(ls -A1p --color=never | sed 's=.*[^\/]$==g; s=^[\.].*==g; /^$/ d' | tr '\n' ':')
}

# Generate dotdirectories
menudotdir () {
	DOTDIRs=$(ls -A1p --color=never | sed 's=.*[^\/]$==g; s=^[^\.].*==g; /^$/ d' | tr '\n' ':')
}

# Generate files
menufile () {
	FILEs=$(ls -A1p --color=never | sed 's=.*[\/]$==g; s=^[\.].*==g; /^$/ d' | tr '\n' ':')
}

# Generate dotfiles
menudotfile () {
	DOTFILEs=$(ls -A1p --color=never | sed 's=.*[\/]$==g; s=^[^\.].*==g; /^$/ d' | tr '\n' ':')
}

# Generate default menu
menu () {
	menudir
	menudotdir
	menufile
	menudotfile
}

# Update list in each move
update_menu () {
	list=
	# Rebuild list in every move
	for element in $keeplist; do
		case $element in
			DIRs) menudir && list="$list$DIRs" ;;
			FILEs) menufile && list="$list$FILEs" ;;
			DOTDIRs) menudotdir && list="$list$DOTDIRs" ;;
			DOTFILEs) menudotfile && list="$list$DOTFILEs" ;;
		esac
	done
}

### MAIN FUNCTIONS

choice () {
	while [ -n "$chosen" ]; do
		update_menu
		# Default menu list if no arguments given
		[ -z "$keeplist" ] && menu && list="$DIRs$FILEs$DOTDIRs$DOTFILEs"

		# Generate menu with/without arguments
		chosen=$(printf '%s:' "$backward" "$target" "$copypath" "$list" | tr ':' '\n' | dmenu -l 10 -i -p "$prompt")
   		if [ "$chosen" = "$target" ]; then
   		        readlink -e "."
   		        break
		elif [ "$chosen" = "$backward" ]; then
			cd "../"
		elif [ "$chosen" = "$copypath" ]; then
			readlink -e "." | tr -d '\n' | xclip -selection clipboard
			notify-send "Path copied to clipboard." &
			exit 0
   		elif [ -d "$chosen" ]; then
   		        cd "$chosen" || exit 1
   		else
			readlink -e "$chosen"
   		        break
   		fi
	done
}

### ARGUMENTS

while [ -n "$1" ]; do
	case $1 in
		"-d"|"--directory" )
			keeplist="${keeplist} DIRs"
			;;
		"-f"|"--file" )
			keeplist="${keeplist} FILEs"
			;;
		"-D"|"--dotdirectory" )
			keeplist="${keeplist} DOTDIRs"
			;;
		"-F"|"--dotfile" )
			keeplist="${keeplist} DOTFILEs"
			;;
		"-p"|"--prompt" )
			shift
			prompt="$1"
			;;
		"-h"|"--help" )
			printf "Optional arguments for custom use:
			-d | --directory: menu is directories, no input
			-f | --file: menu is files, no input
			-D | --dotdirectory: menu is hidden directories, no input
			-F | --dotfile: menu is hidden files, no input
			-p | --prompt: prompt for dmenu, input as prompt name
			-h | --help: Show this message\\n"
			exit 0
			;;
		"*" )
			printf "Invalid option"
			exit 1
			;;
	esac
	shift
done

### RUN THE MAIN FUNCTION
choice

